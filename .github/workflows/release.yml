name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

env:
  PACKAGE_NAME: yica-yirage
  PYTHON_VERSION: '3.11'

jobs:
  # Build and test on multiple platforms
  build-and-test:
    name: Build and Test (${{ matrix.os }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            arch: x86_64
            platform: linux
          - os: ubuntu-20.04
            arch: aarch64
            platform: linux
          - os: macos-12
            arch: x86_64
            platform: macos
          - os: macos-14
            arch: arm64
            platform: macos
          - os: windows-2022
            arch: x86_64
            platform: windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build libz3-dev llvm-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        brew install cmake ninja z3 llvm

    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows'
      run: |
        choco install cmake ninja llvm
        # Install Z3 manually
        Invoke-WebRequest -Uri "https://github.com/Z3Prover/z3/releases/latest/download/z3-win.zip" -OutFile "z3.zip"
        Expand-Archive z3.zip -DestinationPath C:\tools\
        echo "C:\tools\z3\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pybind11 cmake ninja

    - name: Build C++ components
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON_BINDINGS=ON -DBUILD_TESTS=ON
        cmake --build . --parallel

    - name: Run C++ tests
      run: |
        cd build
        ctest --output-on-failure

    - name: Build Python package
      run: |
        cd yirage/python
        python setup.py build_ext --inplace
        python -m pip install -e .

    - name: Run Python tests
      run: |
        python -m pytest tests/ -v

    - name: Build wheels
      uses: cibuildwheel@v2.16.2
      env:
        CIBW_PLATFORM: ${{ matrix.platform }}
        CIBW_ARCHS: ${{ matrix.arch }}
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-manylinux_i686"
        CIBW_ENVIRONMENT_LINUX: CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release"
        CIBW_ENVIRONMENT_MACOS: CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release"
        CIBW_ENVIRONMENT_WINDOWS: CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release"
        CIBW_TEST_COMMAND: python -c "import yica_yirage; print('Import successful')"

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
        path: wheelhouse/*.whl

  # Build source distribution
  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Build source distribution
      run: |
        python -m pip install --upgrade pip setuptools wheel
        cd yirage/python
        python setup.py sdist

    - name: Upload source distribution
      uses: actions/upload-artifact@v3
      with:
        name: source-dist
        path: yirage/python/dist/*.tar.gz

  # Build Homebrew formula
  build-homebrew:
    name: Build Homebrew Formula
    runs-on: macos-latest
    needs: [build-and-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Calculate SHA256
      id: sha256
      run: |
        VERSION=${{ github.ref_name }}
        URL="https://github.com/${{ github.repository }}/archive/${VERSION}.tar.gz"
        SHA256=$(curl -sL "$URL" | shasum -a 256 | cut -d' ' -f1)
        echo "sha256=$SHA256" >> $GITHUB_OUTPUT
        echo "url=$URL" >> $GITHUB_OUTPUT

    - name: Update Homebrew formula
      run: |
        sed -i '' "s/sha256 \".*\"/sha256 \"${{ steps.sha256.outputs.sha256 }}\"/" scripts/packaging/yica-yirage.rb
        sed -i '' "s|url \".*\"|url \"${{ steps.sha256.outputs.url }}\"|" scripts/packaging/yica-yirage.rb

    - name: Upload Homebrew formula
      uses: actions/upload-artifact@v3
      with:
        name: homebrew-formula
        path: scripts/packaging/yica-yirage.rb

  # Build Debian packages
  build-debian:
    name: Build Debian Packages
    runs-on: ubuntu-latest
    needs: [build-and-test]
    strategy:
      matrix:
        distro: [ubuntu-20.04, ubuntu-22.04, debian-11, debian-12]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Debian package
      uses: jtdor/build-deb-action@v1
      env:
        DEB_BUILD_OPTIONS: noautodbgsym
      with:
        buildpackage-opts: --build=binary --no-sign
        extra-build-deps: cmake ninja-build python3-dev python3-pybind11 libz3-dev

    - name: Upload Debian packages
      uses: actions/upload-artifact@v3
      with:
        name: debian-packages-${{ matrix.distro }}
        path: debian/artifacts/*.deb

  # Build RPM packages
  build-rpm:
    name: Build RPM Packages
    runs-on: ubuntu-latest
    needs: [build-and-test]
    strategy:
      matrix:
        distro: [centos-8, fedora-38, fedora-39]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build RPM package
      uses: nFnK/create-rpm-action@v1
      with:
        SPEC_FILE: "scripts/packaging/yica-yirage.spec"

    - name: Upload RPM packages
      uses: actions/upload-artifact@v3
      with:
        name: rpm-packages-${{ matrix.distro }}
        path: "*.rpm"

  # Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test]
    strategy:
      matrix:
        variant: [cpu, gpu]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.yica-${{ matrix.variant }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          yicaai/yica-yirage:${{ matrix.variant }}-${{ github.ref_name }}
          yicaai/yica-yirage:${{ matrix.variant }}-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test, build-sdist, build-homebrew, build-debian, build-rpm, build-docker]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release notes
      run: |
        cat > release_notes.md << EOF
        # YICA-Yirage ${{ github.ref_name }}
        
        ## What's New
        - High-performance AI computing optimization framework
        - In-memory computing architecture support
        - Automatic Triton code generation
        - Multi-backend support (CPU/GPU/YICA)
        
        ## Installation
        
        ### pip (Recommended)
        \`\`\`bash
        pip install yica-yirage
        \`\`\`
        
        ### Homebrew (macOS)
        \`\`\`bash
        brew tap yica-ai/tap
        brew install yica-yirage
        \`\`\`
        
        ### APT (Debian/Ubuntu)
        \`\`\`bash
        wget -qO - https://packages.yica.ai/gpg.key | sudo apt-key add -
        echo "deb https://packages.yica.ai/debian stable main" | sudo tee /etc/apt/sources.list.d/yica.list
        sudo apt-get update && sudo apt-get install yica-yirage
        \`\`\`
        
        ### YUM/DNF (RHEL/CentOS/Fedora)
        \`\`\`bash
        sudo yum-config-manager --add-repo https://packages.yica.ai/rpm/yica.repo
        sudo yum install yica-yirage
        \`\`\`
        
        ## Docker
        \`\`\`bash
        docker run -it yicaai/yica-yirage:cpu-${{ github.ref_name }}
        docker run --gpus all -it yicaai/yica-yirage:gpu-${{ github.ref_name }}
        \`\`\`
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: YICA-Yirage ${{ github.ref_name }}
        body_path: release_notes.md
        files: |
          wheels-*/*.whl
          source-dist/*.tar.gz
          homebrew-formula/*.rb
          debian-packages-*/*.deb
          rpm-packages-*/*.rpm
        draft: false
        prerelease: false

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release]
    if: startsWith(github.ref, 'refs/tags/')
    environment: pypi
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels-linux-x86_64

    - name: Download source distribution
      uses: actions/download-artifact@v3
      with:
        name: source-dist

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: .

  # Update package repositories
  update-repositories:
    name: Update Package Repositories
    runs-on: ubuntu-latest
    needs: [create-release]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Update Homebrew tap
      run: |
        # This would typically trigger a webhook or API call
        # to update the Homebrew tap repository
        echo "Homebrew tap update triggered"

    - name: Update APT repository
      run: |
        # This would upload packages to the APT repository
        echo "APT repository update triggered"

    - name: Update YUM repository
      run: |
        # This would upload packages to the YUM repository
        echo "YUM repository update triggered" 