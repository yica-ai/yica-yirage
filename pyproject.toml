[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
    "pybind11>=2.6.0",
    "cmake>=3.18.0",
    "ninja; sys_platform != 'win32'",
]
build-backend = "setuptools.build_meta"

[project]
name = "yica-yirage"
version = "1.0.1"
description = "YICA-Yirage: AI Computing Optimization Framework for In-Memory Computing Architecture"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "YICA Team", email = "contact@yica.ai"},
]
maintainers = [
    {name = "YICA Team", email = "contact@yica.ai"},
]
keywords = ["ai", "optimization", "compiler", "triton", "yica", "yirage", "deep-learning", "in-memory-computing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Compilers",
    "Topic :: System :: Hardware",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.19.0",
    "torch>=1.12.0",
    "triton>=2.0.0; sys_platform=='linux'",
    "z3-solver>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=3.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.900",
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "pre-commit>=2.15",
]
cuda = [
    "cupy>=9.0.0",
    "nvidia-ml-py>=11.0.0",
]
rocm = [
    "torch-rocm>=1.12.0",
]
all = [
    "yica-yirage[dev,cuda]",
]

[project.scripts]
yica-optimizer = "yirage.yica_optimizer:main"
yica-benchmark = "yirage.yica_performance_monitor:main"
yica-analyze = "yirage.yica_advanced:main"

[project.urls]
Homepage = "https://github.com/yica-ai/yica-yirage"
Documentation = "https://yica-yirage.readthedocs.io/"
Repository = "https://github.com/yica-ai/yica-yirage.git"
"Bug Tracker" = "https://github.com/yica-ai/yica-yirage/issues"
Changelog = "https://github.com/yica-ai/yica-yirage/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "yirage/python"}

[tool.setuptools.packages.find]
where = ["yirage/python"]

[tool.setuptools.package-data]
yica_yirage = [
    "kernels/*.cu",
    "kernels/*.h", 
    "configs/*.yaml",
    "templates/*.j2",
]

# Code formatting configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_third_party = ["numpy", "torch", "triton", "z3"]

# Type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "z3.*",
    "triton.*",
    "cupy.*",
]
ignore_missing_imports = true

# Test configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=yica_yirage",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "cuda: marks tests as requiring CUDA",
    "yica: marks tests as requiring YICA hardware",
]

[tool.coverage.run]
source = ["yica_yirage"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 