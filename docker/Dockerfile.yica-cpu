# YICA优化器 CPU Docker镜像
# 不依赖GPU驱动的CPU版本，支持模拟GPU环境

# 使用标准Ubuntu基础镜像
FROM ubuntu:20.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV YICA_GPU_SIMULATION=true
ENV YICA_CPU_ONLY=true
ENV OMP_NUM_THREADS=8

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    unzip \
    python3 \
    python3-pip \
    python3-dev \
    libgtest-dev \
    libeigen3-dev \
    libjsoncpp-dev \
    pkg-config \
    ninja-build \
    libomp-dev \
    libopenblas-dev \
    liblapack-dev \
    htop \
    vim \
    && rm -rf /var/lib/apt/lists/*

# 安装Python依赖 (CPU版本)
RUN pip3 install --no-cache-dir \
    numpy \
    scipy \
    matplotlib \
    pandas \
    torch \
    torchvision \
    torchaudio \
    --index-url https://download.pytorch.org/whl/cpu

# 安装模拟GPU环境的依赖
RUN pip3 install --no-cache-dir \
    scikit-learn \
    xgboost \
    lightgbm \
    optuna \
    psutil \
    memory_profiler

# 设置工作目录
WORKDIR /workspace

# 复制YICA优化器源代码
COPY . /workspace/yica-optimizer

# 创建构建目录
RUN mkdir -p /workspace/yica-optimizer/build

# 构建YICA优化器 (CPU版本)
WORKDIR /workspace/yica-optimizer/build
RUN cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=17 \
    -DWITH_CUDA=OFF \
    -DWITH_CUTLASS=OFF \
    -DWITH_GPU_SIMULATION=ON \
    -DBUILD_TESTING=ON \
    -DCMAKE_CXX_FLAGS="-fopenmp" \
    -GNinja

RUN ninja -j$(nproc)

# 创建YICA运行时环境目录
RUN mkdir -p /workspace/yica-runtime/{configs,logs,checkpoints,models,simulation}

# 复制配置文件
COPY docker/yica-configs/ /workspace/yica-runtime/configs/

# 设置运行时环境变量
ENV YICA_ROOT=/workspace/yica-optimizer
ENV YICA_RUNTIME_DIR=/workspace/yica-runtime
ENV YICA_CONFIG_DIR=${YICA_RUNTIME_DIR}/configs
ENV YICA_LOG_DIR=${YICA_RUNTIME_DIR}/logs
ENV YICA_CHECKPOINT_DIR=${YICA_RUNTIME_DIR}/checkpoints
ENV YICA_MODEL_DIR=${YICA_RUNTIME_DIR}/models
ENV YICA_SIMULATION_DIR=${YICA_RUNTIME_DIR}/simulation

# 创建GPU模拟器配置
RUN echo '{\
    "gpu_simulation": {\
        "enabled": true,\
        "simulated_gpu_count": 4,\
        "simulated_memory_gb": 16,\
        "simulated_compute_capability": "8.6",\
        "performance_scaling_factor": 0.1\
    },\
    "cpu_optimization": {\
        "thread_count": 8,\
        "use_simd": true,\
        "use_openmp": true,\
        "cache_optimization": true\
    }\
}' > /workspace/yica-runtime/configs/cpu_simulation.json

# 创建启动脚本
COPY docker/scripts/start-yica-cpu.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/start-yica-cpu.sh

# 暴露端口
EXPOSE 8080 8081 8082

# 健康检查 (不依赖nvidia-smi)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 设置入口点
ENTRYPOINT ["/usr/local/bin/start-yica-cpu.sh"]
CMD ["--mode=runtime", "--config=cpu", "--simulate-gpu"] 