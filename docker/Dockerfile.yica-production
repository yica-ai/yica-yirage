# YICA-Mirage 生产环境 Docker 镜像
FROM nvidia/cuda:12.1-devel-ubuntu22.04

LABEL maintainer="YICA Team"
LABEL description="YICA-Mirage Deep Learning Framework Production Environment"
LABEL version="1.0.0"

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
ENV YICA_HOME=/opt/yica
ENV MIRAGE_HOME=/opt/mirage

# 设置工作目录
WORKDIR /workspace

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    # 基础工具
    wget curl git vim htop \
    build-essential cmake ninja-build \
    pkg-config autoconf automake libtool \
    # Python 开发环境
    python3 python3-pip python3-dev \
    python3-venv python3-setuptools \
    # 科学计算库
    libblas-dev liblapack-dev \
    libopenblas-dev libatlas-base-dev \
    # 网络和通信
    libopenmpi-dev openmpi-bin \
    libboost-all-dev \
    # 图形和可视化
    libgl1-mesa-glx libglib2.0-0 \
    # 监控工具
    htop iotop nvidia-ml-py3 \
    && rm -rf /var/lib/apt/lists/*

# 创建 Python 虚拟环境
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# 升级 pip 和安装 Python 依赖
RUN pip install --upgrade pip setuptools wheel

# 安装 PyTorch 和相关库
RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

# 安装科学计算和 ML 库
RUN pip install \
    numpy scipy matplotlib seaborn \
    pandas scikit-learn \
    transformers datasets tokenizers \
    accelerate deepspeed \
    triton \
    jupyter jupyterlab \
    tensorboard wandb \
    flask fastapi uvicorn \
    pytest pytest-cov \
    black isort flake8 mypy

# 安装 Mirage 依赖
RUN pip install \
    pybind11 cmake \
    cupy-cuda12x \
    apex --no-build-isolation

# 创建 YICA 目录结构
RUN mkdir -p $YICA_HOME/{bin,lib,include,share} \
    && mkdir -p $MIRAGE_HOME/{bin,lib,python,examples} \
    && mkdir -p /workspace/{data,models,logs,results}

# 复制 YICA 硬件驱动和库（模拟）
COPY docker/yica-drivers/ $YICA_HOME/
COPY docker/yica-libs/ $YICA_HOME/lib/

# 复制 Mirage 源码和构建
COPY . $MIRAGE_HOME/
WORKDIR $MIRAGE_HOME

# 构建 Mirage with YICA 支持
RUN mkdir build && cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_YICA_BACKEND=ON \
        -DENABLE_YICA_OPTIMIZATION=ON \
        -DYICA_ROOT=$YICA_HOME \
        -DENABLE_DISTRIBUTED_TRAINING=ON \
        -DENABLE_PERFORMANCE_MONITORING=ON \
        -DCMAKE_INSTALL_PREFIX=$MIRAGE_HOME \
        -GNinja && \
    ninja -j$(nproc) && \
    ninja install

# 安装 Python 包
RUN cd python && pip install -e .

# 设置环境变量
ENV PYTHONPATH=$MIRAGE_HOME/python:$PYTHONPATH
ENV PATH=$MIRAGE_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$MIRAGE_HOME/lib:$YICA_HOME/lib:$LD_LIBRARY_PATH

# 创建配置文件
RUN mkdir -p /etc/yica-mirage
COPY docker/config/yica-mirage.conf /etc/yica-mirage/
COPY docker/config/logging.conf /etc/yica-mirage/

# 创建启动脚本
COPY docker/scripts/entrypoint.sh /usr/local/bin/
COPY docker/scripts/yica-init.sh /usr/local/bin/
COPY docker/scripts/performance-monitor.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/*.sh

# 健康检查
COPY docker/scripts/healthcheck.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck.sh
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# 暴露端口
EXPOSE 8080 8888 6006 22

# 设置用户
RUN useradd -m -s /bin/bash yica-user && \
    chown -R yica-user:yica-user /workspace $MIRAGE_HOME
USER yica-user

# 工作目录
WORKDIR /workspace

# 启动命令
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["bash"] 