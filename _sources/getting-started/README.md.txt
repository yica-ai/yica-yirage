# 快速入门指南

欢迎使用YICA/YiRage！本节提供快速入门的基础信息。

## 📖 文档列表

### [设计理念](design-philosophy.md)
了解YICA/YiRage的核心设计原则：
- 自包含性 (Self-Contained)
- 环境无关性 (Environment Agnostic) 
- 后端分离的真正目的
- 转换优化代码工具的设计理念

### [快速参考](quick-reference.md)
常用命令和操作的快速参考：
- 一键部署命令
- 访问地址和端口
- 容器管理命令
- 故障排除指南

## 🚀 推荐阅读顺序

1. **[设计理念](design-philosophy.md)** - 理解项目的设计思想
2. **[快速参考](quick-reference.md)** - 掌握基本操作命令
3. **[架构设计](../architecture/)** - 深入了解系统架构
4. **[部署运维](../deployment/)** - 学习部署和运维

## 💡 核心概念

### YICA架构
- **存算一体(CIM)**: 计算单元直接集成到内存中
- **YIS指令集**: 专为YICA设计的指令集
- **三级内存层次**: 寄存器、SPM、DRAM

### YiRage引擎
- **多后端支持**: CUDA、Triton、YICA
- **自动优化**: 智能搜索最优计算图
- **转换工具**: 代码转换和优化

## 🎯 使用场景

- **AI模型推理**: 大幅提升推理性能
- **算子优化**: 自动生成优化的计算内核
- **跨平台部署**: 支持多种硬件后端
- **研究开发**: 算法验证和性能分析

## ❓ 常见问题

**Q: 什么是存算一体架构？**
A: 将计算单元直接集成到内存中，减少数据移动，提高计算效率。

**Q: YiRage与其他优化工具有什么区别？**  
A: YiRage是转换优化工具，专注于代码转换和多后端支持，而非依赖特定硬件。

**Q: 如何选择合适的后端？**
A: 根据硬件环境自动选择，或手动指定 `backend="yica"` 等。

## 🔗 下一步

- 阅读 [YICA架构文档](../architecture/yica-architecture.md)
- 查看 [部署指南](../deployment/)
- 尝试 [API示例](../api/)
